<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-08-30T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Speeding Up Page Loading</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/30/speeding-up-page-loading/"/>
    <id>http://blog.url.com/2016/08/30/speeding-up-page-loading/</id>
    <published>2016-08-30T01:00:00+01:00</published>
    <updated>2016-08-30T17:36:35+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Having got back from break Michael and I paired on improving the performance on the AgileVentures&amp;rsquo; user page.  Performance on the user page, also referred to as the members page, or volunteer directory, had been deteriorating for a while as it was set up to display all the users in the site in a single page.  This was fine when we had a hundred members, but as the membership number exceeded 2500, the page load was taking longer than 12 seconds to get the HTML up, and then a similar amount again to load all the user avatar images.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a rule of thumb that if your web page takes longer than seven seconds to load then whoever was trying to look at your page is now off somewhere else.  And that was the standard a while back and I think things need to be a lot faster these days.  There are &lt;a href="http://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds/"&gt;suggestions&lt;/a&gt; that you&amp;rsquo;ll lose 25% of users if a site takes longer than 4 seconds to load, and Google will crawl your site slower if it takes more than 2 seconds to load.  So clearly our user page load times were a problem.  &lt;/p&gt;

&lt;p&gt;This is perhaps another example of the &lt;a href="http://blog.agileventures.org/did-we-boil-a-frog/"&gt;boiling frog issue&lt;/a&gt;; the performance of the page slowly getting worse over time, and of course there being lots of other things to fix, features to add, business models to tweak etc.  However, having rolled out the new &amp;ldquo;Karma&amp;rdquo; feature where we rank our users in terms of their contributions to our open source charity projects, it was crystal clear we couldn&amp;rsquo;t showcase our new functionality without improving the page load times. &lt;/p&gt;

&lt;p&gt;So the best approach to take?  I was in danger of getting distracted by the range of terminology in use related to the members page.  The page title itself is &amp;ldquo;Volunteers Directory&amp;rdquo;, the URL is &lt;code&gt;http://www.agileventures.org/users&lt;/code&gt;, the navigation tab that links to it is titled &amp;ldquo;members&amp;rdquo;, and the database models all refer to users.  There&amp;rsquo;s also mention of &amp;ldquo;Filter users by&amp;rdquo; in the page itself.  Domain Driven Design (DDD) tells us that we should try and consolidate on the key terms that are meaningful to our stakeholders, and then use them consistently throughout our system. I was half tempted to try and standardise our terminology.  It&amp;rsquo;s funny though, because each of the terms &amp;ldquo;users&amp;rdquo;, &amp;ldquo;members&amp;rdquo; and &amp;ldquo;volunteers&amp;rdquo; have different overtones and are more appropriate in certain situations.  In creative writing I have a rule of thumb to avoid using the same term too frequently, or too close together.  Is there a counter-argument that there&amp;rsquo;s value from using a cluster of terms in order to provide more ways to relate to a concept, or is that just confusing?&lt;/p&gt;

&lt;p&gt;Clearly that&amp;rsquo;s a side-show compared to the more immediate problem of the page being slow to load.  Whatever the terminology, if the page takes 15 seconds to load, almost no one is going to look at it.  So then the question became, how do we speed up the page load?  Pagination seems the obvious answer.  We did spend some time profiling the page and seeing that the database query itself was pretty fast and that most of the 9 or so seconds of server activity was in the rendering of templates (i.e. string manipulation). This was helpfully reported in the Rails logs, and it seemed clear that merging the collection of users with the html templates was the main bottleneck.  Caching is a possibility here.  Rails has collection caching (a type of &lt;a href="http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching"&gt;fragment-caching&lt;/a&gt;) that might work for us here with a few changes to our templates, but we&amp;rsquo;d pretty much settled on some form of pagination as the fastest and most reliable way to improve the situation.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a big fan of infinite scroll to allow users a very simple experience of moving further on in a list of objects, and maybe we&amp;rsquo;ll want that ultimately, but this was a bleed and seemed that we needed to get the absolutely simplest fix out fast and then we could come back around to consider other options.  We already had basic vanilla pagination in the projects page.  Ironically I remember that when it was implemented (and I was playing the role of non-technical customer) I said I&amp;rsquo;d have preferred it to have been infinite scroll, since at the time I was convinced that infinite scroll was fantastically better from a UX point of view.  I think I&amp;rsquo;d still like both of them to be infinite scroll; although another data-point is that one of our power-users said he prefers pagination because he can use the page-end key on his keyboard to jump to the last result &amp;hellip;&lt;/p&gt;

&lt;p&gt;Anyway, the key thing here is get the simplest thing done and deployed in order to ensure that there aren&amp;rsquo;t areas of complexity that you&amp;rsquo;ve overlooked, that will end up delaying the release of a quick fix.  Simple pagination with the &lt;a href="https://github.com/amatsuda/kaminari"&gt;kaminari&lt;/a&gt; gem is what we went for, because that seemed more recently updated than the competing &lt;a href="https://github.com/mislav/will_paginate"&gt;will_paginate&lt;/a&gt; gem; and there were also hints we could upgrade kaminari to infinite scroll easily.  We got kaminari working to discover our projects page was already using will_paginate.  Should we consolidate?  The work was done &amp;hellip; we pushed on.  The main issue that came up was that the JavaScript quick user filter in our users page now didn&amp;rsquo;t work.  The JS filter would filter precisely what was in the page, i.e. it was relying on all the the users being displayed in a single page.  After some consideration we removed the functionality and the associated tests.  We spoke to a couple of users; we couldn&amp;rsquo;t immediately find anyone for whom this functionality was important.  In order to move forward we took it out, and got a pull-request in for adding pagination to the users page.&lt;/p&gt;

&lt;p&gt;CodeClimate pushed back on the complexity of our user controller&amp;rsquo;s index method complexity, I refactored and followed &lt;a href="https://github.com/diraulo"&gt;Raoul&amp;rsquo;s&lt;/a&gt; suggestion to remove the commented quick filter code/tests.  Raoul pushed out the code to production this weekend and now you can see our users&amp;rsquo; page with simple pagination loading in under two seconds.  Thanks Raoul!  Just what the doctor ordered.  Check it out and see what your AgileVentures&amp;rsquo; ranking is:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.agileventures.org/users"&gt;http://www.agileventures.org/users&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pair Programming Robots and having Fun</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/23/pair-programming-robots-and-having-fun/"/>
    <id>http://blog.url.com/2016/08/23/pair-programming-robots-and-having-fun/</id>
    <published>2016-08-23T01:00:00+01:00</published>
    <updated>2016-08-24T12:11:42+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve had this idea for a lightweight pair programming app for a while now.  One of the main inspirations is the &lt;a href="https://itunes.apple.com/gb/app/letterpress-word-game/id526619424?mt=8"&gt;iOS letterpress app&lt;/a&gt;.  If you don&amp;rsquo;t know the game it&amp;rsquo;s a letter square, and you try to make the longest word you can from the letter square.  Pretty straightforward stuff, except that you can play and challenge people all round the world.  You take turns to make the longest word you can. What&amp;rsquo;s really cool about the app is that you can have a little game with a total stranger.  At least I assume you are actually playing with someone rather than against a robot.  I&amp;rsquo;m not sure how drop outs are managed.  When I think about it, playing against robots would be a more reliable experience, but I don&amp;rsquo;t know the stats for drop outs.  I&amp;rsquo;ve certainly dropped out of games, but perhaps I&amp;rsquo;m a sociopath and 99% of people carry on playing with each other till the end?&lt;/p&gt;

&lt;p&gt;Anyway, these days there are lots of games where you compete and even team up with strangers, e.g. Splatoon, League of Legends (LoL) and so on.  I&amp;rsquo;d love to learn more about how these games match people up to try and maximise the user experience as I think we have a related problem with matching people up for pairing sessions in our &amp;ldquo;Agile Development using Ruby on Rails&amp;rdquo; MOOC.  If Splatoon/LoL are the gaming equivalent of full screenshare pairing, then simpler games like letterpress would correspond to a sort of micro-pairing experience on a small toy problem.&lt;/p&gt;

&lt;p&gt;Ever since I&amp;rsquo;ve looked into the different styles of &lt;a href="http://www.agileventures.org/remote-pair-programming/pair-programming-protocols"&gt;ping-pong pairing&lt;/a&gt; I&amp;rsquo;ve been fascinated how protocols like &amp;ldquo;one undermanship&amp;rdquo; have a game like feel.  They remind me somehow of turn based games like chess.  So I keep thinking of a letterpress style micro-pair programming game where you are involved in light-weight ping-pong pairing sessions with people all round the world.&lt;/p&gt;

&lt;p&gt;Maybe there&amp;rsquo;s nowhere near the number of people interested in pair programming as there are in playing word games, so maybe there would never be the critical mass to make it fun, &amp;hellip; unless, robots?  I finally spent some time on a micro-pairing robot on a plane recently.  There are a couple of challenges; one is working out the rules of this ping-pong pairing game I&amp;rsquo;m imagining, and another is getting a robot to pair program sensibly with you.   &lt;/p&gt;

&lt;p&gt;An instance of a pairing game might run like this:&lt;/p&gt;

&lt;p&gt;Spec involves input/output, e.g. 2 =&amp;gt; 4, 3 =&amp;gt; 6, 4 =&amp;gt; 8  (in this case a numeric doubler).  The &amp;ldquo;one undermanship&amp;rdquo; protocol involves writing the absolute minimum amount of code (which we could perhaps measure in terms of characters? code-complexity?)&lt;/p&gt;

&lt;p&gt;Pair A writes:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'doubler'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initial failing test.  So Pair B works to write the absolute minimum code to make this test pass, e.g. &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then writes a new test that will fail&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'doubler'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So pair A writes the minimum to make this pass, in this case being intentionally obtuse (they could write &lt;code&gt;number*2&lt;/code&gt; which would be fewer characters, but perhaps we can give them points for passing only the existing tests and not others?):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then pair A adds another failing test:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'doubler'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally pair B writes the general solution:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course pair B could write:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it would be nice if we could somehow end on the more general case, with a stronger set of tests (for edge cases etc.? could build those into the initial input/outputs).  The thing about making this an enjoyable game might be a scoring system? So that you get points for one-undermanship obtuseness to an extent, but that past a certain point there&amp;rsquo;s a refactoring bonus.  Maybe the sensible approach is to only score a single round of hard coding where the complexity is actually less than the general solution?&lt;/p&gt;

&lt;p&gt;So there&amp;rsquo;s also the issue of coming up with a range of simple coding problems that make this more interesting than the most trivial cases - I guess there&amp;rsquo;s enough complexity in a few basic arithmetic problems, and we can collect more over time - there are great repositories like code wars.  Anyway, with any multi-player game we have the classic bootstrap problem that if we had a great game that lots of people were playing, then there would be lots of people to play with and it would be great; but initially there are no people playing it.  So in the meantime can we scaffold the gameplay with pretend people?  Can we write a robot pairer than can make a test pass, and generate a new chunk of code to move the ping pong on?&lt;/p&gt;

&lt;p&gt;For a restricted set of cases I think the answer is yes.  At least what I started on the plane was a chunk of code that would take and analyse a ruby exception and write the necessary code to make it pass.  It&amp;rsquo;s not very complex at the moment, it&amp;rsquo;s basically this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;NoMethodError&lt;/span&gt;
    &lt;span class="sr"&gt;/undefined method \`(.*)\' for main\:Object/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"def &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; 'robot method' ; end "&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;ArgumentError&lt;/span&gt;
    &lt;span class="sr"&gt;/wrong number of arguments \(given (.*), expected \d\)/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;num_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="c1"&gt;# use class or arg to auto-infer an approprate name?&lt;/span&gt;
    &lt;span class="n"&gt;arg_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_args&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"arg&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="sr"&gt;/\(eval\)\:1\:in \`(.*)\'/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;backtrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
    &lt;span class="n"&gt;method_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"def &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;arg_string&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;); 'robot method' ; end"&lt;/span&gt;  
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"cannot handle error class &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What it does at the moment is take NoMethodErrors and ArgumentErrors and fix things up so the specified method is created with the correct number of arguments.  Assuming that the game involves working through a set of input/output values on a range of basic arithmetic problems I can imagine it being fairly easy to extend to make the majority of failing tests pass.  Given an input/output pair, generating an RSpec test is pretty trivial.  So a little more work here and one could have a basic ping pong pairing partner.  I don&amp;rsquo;t fool myself that it wouldn&amp;rsquo;t break fairly quickly, but I think rounds of polishing could make it work reasonable well for a range of introductory problems.  Would it create a fun game that many people would want to play?  Probably not &amp;hellip; Might it be a good learning experience for some people? &amp;hellip; maybe?  I think the process of stack-trace/error analysis is quite interesting and a nice feature would be to have the robot be able to explain why it does what it does - they would be canned explanations, but they could highlight how the stacktrace/error has been analysed in order to work out what to do next.&lt;/p&gt;

&lt;p&gt;I guess the best initial interface would be to make it a command line game that you could play and the robot would edit the file that you are both working on perhaps?   Having started it I&amp;rsquo;m kind of interested in extending it; we&amp;rsquo;ll see if anyone else thinks this is anything other than mindless naval gazing :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Agile Approach to Login/SignUp Problems</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/21/agile-approach-to-login-signup-problems/"/>
    <id>http://blog.url.com/2016/06/21/agile-approach-to-login-signup-problems/</id>
    <published>2016-06-21T01:00:00+01:00</published>
    <updated>2016-08-24T12:09:36+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Nobody likes passwords.  Nobody enjoys signing up and logging in, but we need authentication, don&amp;rsquo;t we?  The AgileVentures site is actually very open as regards who can edit what, the site is really one giant wiki; not that many people actually notice.  No one expects to be able to edit a site that isn&amp;rsquo;t explicitly labelled as a wiki.&lt;/p&gt;

&lt;p&gt;However we do want to be able to see who does the editing, and have a list of people participating in our community.  Hence signup and login (or signin).  Originally WebSiteOne (WSO - the codename for the &lt;a href="http://www.agileventures.org/"&gt;AgileVentures&lt;/a&gt; site software) had three ways to signup:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;signup via email address&lt;/li&gt;
&lt;li&gt;signup via GitHub&lt;/li&gt;
&lt;li&gt;signup via Google+&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SignUp via a third party is a great convenience in that if avoids having to manage yet another password.  &lt;a href="http://www.agileventures.org/"&gt;AgileVentures&lt;/a&gt; is a pair programming community and so it makes sense that most users would have a GitHub account to manage their code, and a Google+ account in order to use Google Hangouts, the default video conferencing and pair programming framework.&lt;/p&gt;

&lt;p&gt;All was not rosy however.  We had to turn off the pure email sign up because the spambots caught us and starting creating hundreds of dummy accounts.&lt;/p&gt;

&lt;p&gt;The GitHub signup (always?) had the problem that if the user&amp;rsquo;s GitHub profile does not have their email set to public we get an error.  This is partly because our system is set to use email as the &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1093"&gt;unique identifier&lt;/a&gt; of the user, and also because we&amp;rsquo;d like to email users a welcome message when they sign up, support secure password reset etc.  A quick fix for this issue was a message to alert the user their GitHub email needs to be public, but complexities of the GitHub interface means that a non-trivial number of users get stuck.  &lt;/p&gt;

&lt;p&gt;The Google+ signup/in used to work fine, but some change in the system added dynamic elements to the redirect URL making it &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1063"&gt;impossible to sign up&lt;/a&gt; (or sign in?) via Google+.  We were contemplating removing Google+ entirely, but that&amp;rsquo;s complicated since users who previously signed up via G+ wouldn&amp;rsquo;t be able to sign in and can&amp;rsquo;t create GitHub accounts due to email conflicts with their old accounts - although this can be fixed with a password reset.  Working out all of the above was sucking up valuable resources, not to mention the negative reflection on the site.  We also wanted to be able to track who&amp;rsquo;s pairing with who in which hangout which requires connecting Google+ ids to AgileVentures users.&lt;/p&gt;

&lt;p&gt;Analysis of the sites&amp;rsquo; user footfall suggested that a clear majority of users were successfully signing up and logging in; making this whole issue an annoyance rather than a crisis.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/r59glrb1wg3qroe/google_analytics_wso_signup.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;That appeared to reduce the priority of fixing these issues, relative to other minor bugs currently that were being reported about the site, e.g. some timezones not being correctly detected, and working on new developments such as the static site and the premium members page which might lead to sustainability of AgileVentures in the long run.&lt;/p&gt;

&lt;p&gt;You might say, well hey, let&amp;rsquo;s add a captcha to prevent the spam sign ups and re-enable the pure email signup?  Yes, but do we really want to managing that tech?  That&amp;rsquo;s adding a somewhat complex tech solution that GitHub and G+ have already handled for us.  Not to mention that we don&amp;rsquo;t yet have the resources to pay for the SSL certificates that would completely secure pure email login.  AgileVentures is a community for everyone, but unlike FreeCodeCamp we&amp;rsquo;re not focused on total beginners.  We assume you&amp;rsquo;ve got a modicum of programming experience. Although that said, we&amp;rsquo;d love to get more marketing and project management people involved - but they can login through Google+ - the absolute minimum requirement is that you can at least join a hangout.&lt;/p&gt;

&lt;p&gt;So we focused on taking some simple steps, e.g. &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1099"&gt;removing the G+ signup button&lt;/a&gt;, and adding &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1120"&gt;more instructions about how to handle GitHub settings for public emails&lt;/a&gt;.  In my book &lt;em&gt;this&lt;/em&gt; is the Agile approach at its heart - do the simplest possible thing to improve the situation and see if that helps before rushing into a more complex intervention like a &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1067"&gt;captcha&lt;/a&gt; or &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1093#issuecomment-225562997"&gt;adding a form for non-public GitHub users to add their email&lt;/a&gt;.  Not that we rule out taking those steps at some point, but it&amp;rsquo;s sensible to start with small steps to explore the issue to see if the resources to support the more complex solutions are going to be a wise investment.&lt;/p&gt;

&lt;p&gt;Having taken those first steps we got a lid on the issue, i.e. no more complaints about Google+ sign up failure since it is no longer an option; and clearer documentation to help those getting stuck on GitHub email publicity settings.  The desire to support better tracking of pair partners led us to try and get to the bottom of the Google+ redirect url problem.  Turns out that &lt;a href="https://github.com/samdunne/omniauth-gplus/issues/25"&gt;upgrading the Omniauth-oauth2&lt;/a&gt; gem introduced a change to the redirect_url that broke Google+ authentication, but not Github authentication.&lt;/p&gt;

&lt;p&gt;The Omniauth test mode acceptance tests we had in place did not catch the change to the redirect_url so we had no idea until users started encountering the problem - far from ideal.  Having manually tested that downgrading the Omniauth-oauth2 gem to version 1.3.1 did actually fix the problem, we spent a chunk of time looking for a more realistic acceptance test.  The problem is that there was no test that the redirect_url being generated was correct - something that can&amp;rsquo;t be achieved with our acceptance test supporting tool Capybara; at least not without &lt;a href="http://makandracards.com/makandra/15217-test-redirects-to-an-external-url-with-cucumber-capybara"&gt;hacking up the underlying Rails system itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The compromise seemed to be creating a request spec, a sort of unit test for the Rails authentication controller; to check that the redirect url is formatted correctly.  This test should fail if someone were to accidentally upgrade the gem again - although we&amp;rsquo;ve locked it to the working version in the Gemfile.&lt;/p&gt;

&lt;p&gt;We decided to push out the &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1126"&gt;fix&lt;/a&gt; ASAP and create a &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1127"&gt;chore&lt;/a&gt; for the request spec.  Partly because it would be great to have the fix out to support the legacy users who signed up with Google+ in the past, but also because experience tells us that we may have a further testing insight in a few days or weeks.&lt;/p&gt;

&lt;p&gt;In summary, it&amp;rsquo;s a complex web we weave, and to navigate it we need to take tiny steps, be careful about taking on maintenance burdens, or doing things that won&amp;rsquo;t support our long term goals.  We&amp;rsquo;ve also got to be pragmatic about what we can actually test and balance the time spent searching for testing solutions with delivering needed features to users.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Collaborating in Software Teams</title>
    <link rel="alternate" href="http://blog.url.com/2016/05/17/collaborating-in-software-teams/"/>
    <id>http://blog.url.com/2016/05/17/collaborating-in-software-teams/</id>
    <published>2016-05-17T01:00:00+01:00</published>
    <updated>2016-08-24T12:09:36+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Collaborating and communicating effectively can be particularly challenging under certain circumstances.  Effective &amp;ldquo;soft skills&amp;rdquo; are critical in many professions, but especially for groups of programmers collaborating with project managers, designers, clients and other stakeholders.&lt;/p&gt;

&lt;p&gt;A particular challenge arises from the communication mindset that one might adopt in order to solve a programming problem, versus the mindset that best supports communicating with another human effectively.&lt;/p&gt;

&lt;p&gt;Computers are interesting interlocutors because you can generally ask them just as much as you like and they will continue providing answers.  Sometimes it can be difficult to get the answer you want; but solving a programming problem is often a Holmesian deductive process whereby you construct hypotheses and try to drive towards what you hope is the underlying truth of what is going on.&lt;/p&gt;

&lt;p&gt;After several hours of little progress on a problem you may need to restrain yourself and re-focus on higher level project goals, but it&amp;rsquo;s unlikely that the computer will start complaining, or simply shut down and avoid interacting with you in future.&lt;/p&gt;

&lt;p&gt;Humans are, in my experience, a different story.  There are some humans who may be willing to continue debating with you until the &amp;ldquo;deep truth&amp;rdquo; of a matter is uncovered.  These individuals are perhaps more likely to be found in an academic setting, or to be judged as somewhere along the autistic spectrum; and of course anybody may be happy to have a deep debate if they are sufficiently interested in a topic and not under time pressure to be doing something else.  &lt;/p&gt;

&lt;p&gt;However, many people seem to find an excess of debate uncomfortable and/or frustrating, particularly if they are not interested in the debate or have something else that they really want to get done.  Unfortunately it&amp;rsquo;s easy for someone with a strong academic or programmatic mindset to create and/or pursue a debate on a topic past the comfort point of other&amp;rsquo;s involved in the dialogue, or indeed those who are simply present and listening.&lt;/p&gt;

&lt;p&gt;What those with the academic/programmer mindset may sometimes miss is the social cues that people give to indicate that they are uncomfortable with the intensity or duration of a debate.  People vary enormously in their capacity to give and interpret those social cues.  These cues also vary to different extents across nationalities, cultures and social classes.  A given individual will also wax and wane in their ability to read those cues depending on their level of fatigue, stress, intoxication and so forth.&lt;/p&gt;

&lt;h2&gt;How much debate is right for your team?&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s important when working with a group to consider carefully how far to pursue a debate.  It may be that there is an important decision to be made that depends on whether certain hypotheses are true; however it makes sense to pick these sorts of battles very carefully.  In particular, fierce debates can make others uncomfortable and put them off contributing their potentially valuable ideas both immediately, and in the long run.&lt;/p&gt;

&lt;p&gt;I believe there is also an aspect of ego here.  The desire to continue the debate can be connected to a wish to show that one&amp;rsquo;s position is correct, that one is smart, informed and logical.  There are points where the best thing for the team is to end the debate, but the desire to prove one&amp;rsquo;s point or get the upper hand can make that difficult for some personalities.&lt;/p&gt;

&lt;p&gt;This can come in very strongly as regards criticism, or the raising of concerns. When people are criticised they may be tempted to defend their actions, e.g.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Critic&lt;/strong&gt;: &amp;ldquo;I&amp;rsquo;m not sure that X was a good idea&amp;rdquo;&lt;br&gt;
&lt;strong&gt;Defender&lt;/strong&gt;: &amp;ldquo;I did X because of Y and we knew that was a problem, and actually it&amp;rsquo;s not that big an issue because of Z and we&amp;rsquo;ll do it differently next time and, and, and &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There is a particular danger that if you strongly dispute or defend against people&amp;rsquo;s concerns, they may well end up being dis-incentivized to raise those concerns with you in future; and when they really have a problem with you, they may feel that a resolution is impossible.  An alternative approach is to avoid defending your past actions and where possible create space to focus on understanding the concern, e.g. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Critic&lt;/strong&gt;: &amp;ldquo;I&amp;rsquo;m not sure that X was a good idea&amp;rdquo;&lt;br&gt;
&lt;strong&gt;Responder&lt;/strong&gt;: &amp;ldquo;That&amp;rsquo;s interesting, what didn&amp;rsquo;t you like about X?&amp;rdquo;&lt;br&gt;
&lt;strong&gt;Critic&lt;/strong&gt;: &amp;ldquo;Well it seemed too risky; I think we should do more Y in future&amp;rdquo;&lt;br&gt;
&lt;strong&gt;Responder&lt;/strong&gt;: &amp;ldquo;Ah, and why would Y be less risky?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Here the responder is employing a questioning tactic to draw out ideas from the critic.  There&amp;rsquo;s still the danger that excessive questioning can sometimes feel like debate, but a small number of carefully chosen and calmly posed questions can go a long way to making the critic feel that they are being listened to and understood.&lt;/p&gt;

&lt;p&gt;On occasion there may not be time to draw a critic&amp;rsquo;s ideas out; and fair enough, but unfortunately a defensive reaction can be mis-interpreted as a failure to listen and understand.  I personally find it difficult to avoid debating assertions that I strongly disagree with.  Not stating my alternative point of view feels to me, on an emotional level, that I am conceding to something I disagree with.    However that is no excuse; as a team member, or particularly a team leader, it&amp;rsquo;s critical to assess whether it is the right time to have a debate.&lt;/p&gt;

&lt;p&gt;Maybe on a given occasion a debate is needed, but the danger is that the debate is started or continued because of an emotional reaction rather than a rational decision that it&amp;rsquo;s a good time to have a debate on that particular topic with or in front of the team.&lt;/p&gt;

&lt;p&gt;In summary, interacting with people is complicated, but the Agile method gives guidance.  Reflect at some regular interval (weekly? monthly?) on how your interactions with other team members are going and try to see where you can change your approach to make those interactions smoother and more effective.&lt;/p&gt;
</content>
  </entry>
</feed>
