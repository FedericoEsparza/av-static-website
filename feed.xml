<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-09-02T01:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>More Sandboxing</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/02/more-sandboxing/"/>
    <id>http://blog.url.com/2016/09/02/more-sandboxing/</id>
    <published>2016-09-02T01:00:00+01:00</published>
    <updated>2016-09-02T20:34:03+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;So, following up on yesterday&amp;rsquo;s &lt;a href="http://nonprofits.agileventures.org/2016/09/01/how-much-sandboxing/"&gt;post on sandboxing&lt;/a&gt; acceptance tests of Stripe&amp;rsquo;s credit card functionality in Rails, Michael and I did another pairing session.  In a couple of hours we had the tests passing, and the basic card update functionality in place, but not without a little jiggery-pokery with the way that the PuffingBilly gem stores its HTTP cache files.  The point of departure was that having added an extra Cucumber scenario for the card update operation, a related scenario about signing up for premium plus failing with the common refrain of:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You cannot use a Stripe token more than once: tok_18CsXM... (Stripe::InvalidRequestError)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I am not 100% certain, but I had strong suspicions that this was because the Billy cache is shared between different scenarios, and so a token that gets used in one scenario gets re-used in another.  As I described in some detail yesterday, Stripe interactions involve network connections to the Stripe servers from the users browser via Ajax, and from our server side.  VCR caches and plays back http connections that our server makes, but does nothing for the Ajax requests made by the headless browser as part of our Cucumber/Capybara/Poltergeist/PhantomJS acceptance test.  &lt;/p&gt;

&lt;p&gt;I found the &lt;a href="https://github.com/oesmith/puffing-billy/issues/152"&gt;billy github issue&lt;/a&gt; where I had been asking about functionality to support different caches for different scenarios, and saw ronwsmith&amp;rsquo;s suggestion about changing the cache_path in a before block.  VCR does this automatically, and I guess we could get this into Billy by default with a PR, but in the first instance we created the following:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'@javascript'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;scenario&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;feature_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scenario&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;
    &lt;span class="n"&gt;scenario_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scenario&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"features/support/fixtures/req_cache/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;feature_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt;
    &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"features/support/fixtures/req_cache/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;feature_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;scenario_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This took several passes and a bit of poking around in the Billy code to reveal that we had to make the directories incrementally, but with this in place we had separate http caches set up for each scenario.  Although this means checking in some cache files repeatedly it ensures our tests are independent, and this allowed all of our charge related scenarios to pass both individually and in batch.  We still hadn&amp;rsquo;t finished the scenario to test all the way through to changing the customers card.  Pushing on there we still got the same error in a single scenario when we tried to have more than one interaction with the Stripe server.  I&amp;rsquo;m not 100% sure we have the ideal setup, but we have a big load of Billy config to ignore the URL params on many Stripe related requests like so:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Billy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_request_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ignore_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'https://api.stripe.com/v1/tokens'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://q.stripe.com/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://js.stripe.com/v2/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/api/outer/manhattan'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/api/account/lookup'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/data/locales/en_gb-TXHkb1MWMa7xOQfCZf1DFA.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/data/locales/en_us-tZLon0RoQY0knbOURjQ.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/data/locales/en_gb-LkmkoD88BacHIqnX4OXm6w.json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'https://checkout.stripe.com/v3/BFV9gQSjIO6MQNzvbBr9GA.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;'http://checkout.stripe.com/v3/BFV9gQSjIO6MQNzvbBr9GA.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;persist_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'features/support/fixtures/req_cache/'&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;non_successful_cache_disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our VCR it set up to ignore all parameters on requests:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="no"&gt;VCR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hook_into&lt;/span&gt; &lt;span class="ss"&gt;:webmock&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cassette_library_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'features/support/fixtures/cassettes'&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ignore_localhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_cassette_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;:match_requests_on&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="ss"&gt;:method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="no"&gt;VCR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;request_matchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uri_without_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:imp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:prev_imp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I did open a &lt;a href="https://github.com/oesmith/puffing-billy/issues/147"&gt;ticket&lt;/a&gt; to request a similar feature on Billy.&lt;/p&gt;

&lt;p&gt;Anyhow, getting the Billy cache to work with Stripe seems particularly tricky.  Without many of the ignore params specifications in the Billy config each new run of the tests will generate new entries in the Billy cache, because they are requesting a resource over the network with different ids in the URL params.  The tokens and ids from these requests then generate new requests that VCR caches, and so we have a cache leak situation.  Without the right set of ignore_params in Billy we are still hitting the network every time, and there are confusing extra files lying around which other developers don&amp;rsquo;t know what to do with.  To check in?  To delete?  Note also that some of the Stripe requests have hash ids in the URL themselves, so we have to create the test, run once, check the URL from the cache and then add that specific config.  Also there are other requests that Stripe JS makes based on the locale of the developer.  Locking this stuff down is really helped by the fact that Michael is based in the US and I&amp;rsquo;m in the UK, so we can push the code back and forth quickly.  That fact really helped us address some of the tricky timezone issues we&amp;rsquo;ve had in AgileVentures WebSiteOne.&lt;/p&gt;

&lt;p&gt;So if you look carefully you can see the individual locale requests that we&amp;rsquo;re adding to the Billy config to ensure that developers in en&lt;em&gt;gb and en&lt;/em&gt;us don&amp;rsquo;t experience cache leaks.  For developers in other locales we&amp;rsquo;ll have to add extra elements to the Billy config, or get that &lt;a href="https://github.com/oesmith/puffing-billy/issues/147"&gt;general param ignore functionality&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I could go in there and start removing elements from the Billy config to see if we really need all those different ignores, but having spent the best part of two hours on it yesterday, that&amp;rsquo;s not very appealing.  It&amp;rsquo;s a slow process of running a series of acceptance tests, checking to see if there are new files generated, investigating the contents of those files, adjusting the config, deleting all the cache files in two places, and then re-running the acceptance tests.  Maybe some of that could be automated if we linked the two caches somehow (same naming conventions?).  And is anybody doing this besides us?  It&amp;rsquo;s not rocket science, but it is fiddly.&lt;/p&gt;

&lt;p&gt;The time we spent on caching could have been spent on a few of the other things that I&amp;rsquo;d love to have in place, such as getting all our AV logos for Stripe sorted, linking the card update into the UI flow (although that probably should wait till we&amp;rsquo;ve done a live test on production), refactoring out a separate Stripe customer table (since the User table is now a bit bloated), migrating the Stripe customer data from a separate store, and so on.&lt;/p&gt;

&lt;p&gt;Stripe customer support is pretty solid actually.  They&amp;rsquo;d previously given helpful advice that even our test (vs live) tokens should probably not be checked into version control, which we&amp;rsquo;ve tried to avoid, although I have a feeling that Billy doesn&amp;rsquo;t have the VCR-like ability to &lt;a href="https://github.com/oesmith/puffing-billy/issues/143"&gt;strip sensitive tokens from the http caches&lt;/a&gt;.  We were also wondering if it was okay to store stripe Customer ids in our database directly, or if we should be encrypting them like we do with passwords.  Stripe support emailed back to say that they should be in a secure database, but wouldn&amp;rsquo;t usually need more security than usernames and emails, which is one less thing to worry about. Thanks Stripe!&lt;/p&gt;

&lt;p&gt;I think the key thing I now need to ask Stripe is what there thoughts are on fully sandboxed acceptance tests.  It&amp;rsquo;s pleasing that we&amp;rsquo;ve managed to get a green test suite with no cache leaks (fully sandboxed) but I&amp;rsquo;m not sure how much it buys us.  We have a strong set of regression tests so if there is some change in our codebase that breaks these tests we&amp;rsquo;ll know about it pretty fast; but the real acid test is whether the customer can do what they want on our site, and we won&amp;rsquo;t know that for sure when a customer tried to update their card details for real.   Will all of our work testing really pay off?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How Much Sandboxing?</title>
    <link rel="alternate" href="http://blog.url.com/2016/09/01/how-much-sandboxing/"/>
    <id>http://blog.url.com/2016/09/01/how-much-sandboxing/</id>
    <published>2016-09-01T01:00:00+01:00</published>
    <updated>2016-09-01T21:10:33+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Michael and I were pairing on a new feature for the AgileVentures Stripe integration.  As the number of premium members paying recurring subscriptions via credit card is increasing we come to issues such as wanting to edit credit card details.  Stripe has a handy recipe for allowing users to update their card details:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stripe.com/docs/recipes/updating-customer-cards"&gt;https://stripe.com/docs/recipes/updating-customer-cards&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apparently passing expiry dates (and even changing card numbers?) are already &lt;a href="https://stripe.com/blog/smarter-saved-cards"&gt;handled automatically&lt;/a&gt; by Stripe, which is good to know, but users may want to switch to a different card.  Unfortunately for us the recipe for the Stripe card update feature is in PHP.   We managed to figure things out referring to it for reference and to a handy &lt;a href="http://stackoverflow.com/a/28548367/316729"&gt;Stack Overflow post&lt;/a&gt;.  The load bearing part of the code is this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="n"&gt;stripe_customer_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stripe_customer&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stripe_customer_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;card: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;Stripe&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;InvalidRequestError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt; &lt;span class="s2"&gt;"Stripe error while updating card info: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="ss"&gt;:base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It took us a little while to get clear on how this all worked.  The &lt;code&gt;Stripe::Customer&lt;/code&gt; entity is provided by the Stripe gem and allows our rails server to make a request to the Stripe server to retrieve details about a customer.  The tricky thing is that the update operation can only happen on our server after we&amp;rsquo;ve served a form to the user&amp;rsquo;s browser that will make an ajax request to the Stripe servers directly from the users computer.  That form is generated using the following template:&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;%= form_tag charge_path(@current_user.name), method: :put do %&amp;gt;
  &lt;span class="nt"&gt;&amp;lt;script
  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://checkout.stripe.com/checkout.js"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"stripe-button"&lt;/span&gt;
  &lt;span class="na"&gt;data-key=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%= Rails.configuration.stripe[:publishable_key] %&amp;gt;"&lt;/span&gt;
  &lt;span class="na"&gt;data-name=&lt;/span&gt;&lt;span class="s"&gt;"Agile Ventures"&lt;/span&gt;
  &lt;span class="na"&gt;data-panel-label=&lt;/span&gt;&lt;span class="s"&gt;"Update Card Details"&lt;/span&gt;
  &lt;span class="na"&gt;data-label=&lt;/span&gt;&lt;span class="s"&gt;"Update Card Details"&lt;/span&gt;
  &lt;span class="na"&gt;data-allow-remember-me=&lt;/span&gt;&lt;span class="s"&gt;false&lt;/span&gt;
  &lt;span class="na"&gt;data-locale=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a user wants to edit their card details we serve this to their browser.  The user&amp;rsquo;s browser loads Stripe&amp;rsquo;s checkout.js library and uses the base details we provide to generate a popup form like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Stripe pop up form" src="https://www.dropbox.com/s/ja4rsvbra17t8qk/Screenshot%202016-09-01%2008.49.19.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;The user puts their updated details into the form, and when they hit submit that data is sent encrypted to the Stripe servers. We never see it directly on our server, which is clearly good from a security standpoint.  So the Stripe JS library is enabling a direct communication between the user&amp;rsquo;s computer and Stripe.  Once Stripe has processed the data it generates a token and redirects the user&amp;rsquo;s browser back to our server, appending that token to the URL.  That&amp;rsquo;s the point at which the update method above gets called.  We store the Stripe customer id in our user database and can use that to retrieve customer details from the Stripe server on our rails server.  Confused? :-)&lt;/p&gt;

&lt;p&gt;Given that additional information we can move on to understand the rest of the update method.  We now call &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;card: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:stripeToken&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;params[:stripeToken]&lt;/code&gt; is the token that Stripe generated on its servers after it received the new card details from the user.  It&amp;rsquo;s essentially a &amp;ldquo;session&amp;rdquo; that has the card details associated so we can use it to instantiate a card object that represents the customer&amp;rsquo;s new card.  Calling save on it might seem like we are storing something in our local database, but we&amp;rsquo;re not.  We&amp;rsquo;re generating another request to the Stripe servers that this card should be remembered by Stripe and then we&amp;rsquo;re setting it as the default card for the customer and then calling save on customer generates another network request to Stripe to ensure that the new card is used in future.&lt;/p&gt;

&lt;p&gt;So there&amp;rsquo;s a lot of networking going on there behind the scenes.  Stripe helpfully provides test tokens and a test Stripe endpoint for testing purposes.  For our automated tests we assume that it&amp;rsquo;s not good practice to keep hitting the Stripe endpoints so we use the &lt;a href="https://github.com/vcr/vcr"&gt;VCR gem&lt;/a&gt; to record all the interactions between our rails server and Stripe.  Of course it&amp;rsquo;s not just the Rails server that&amp;rsquo;s communicating with Stripe.  It&amp;rsquo;s also the user&amp;rsquo;s browser via Ajax calls, so to properly sandbox everything in our acceptance tests we use the &lt;a href="https://github.com/oesmith/puffing-billy"&gt;puffing billy gem&lt;/a&gt;, which acts like VCR but on our headless browser (phantomjs) instead of on our server.&lt;/p&gt;

&lt;p&gt;Getting these sandboxing gems all set up to work with the Stripe interactions is not trivial, and requires a fair amount of playing with configuration.  This is because Stripe won&amp;rsquo;t allow the same token to be used twice, and naturally it is very sensitive to attempts to hack it, so if the environment is slightly off what it expects then it will refuse to operate.  We&amp;rsquo;d previously got the full sandboxed acceptance tests working for our premium and premium plus subscription sign up processes.  Adding this new functionality (which isn&amp;rsquo;t completed yet) is causing me to think through this whole set up again.&lt;/p&gt;

&lt;p&gt;We had to start tweaking the config again to get the new tests to pass, and where we are up to currently some of the old tests are now failing.  Maybe that will be an easy fix today and maybe not, but I wonder to what extent other organisations are writing fully sandboxed acceptance tests of this kind of functionality?  The guideline I&amp;rsquo;ve been following is that to be a good net citizen you shouldn&amp;rsquo;t allow your acceptance tests to make network calls to third party sites, as that puts unnecessary load on other people&amp;rsquo;s servers, and introduces a dependency and latency into your tests.  But have I been overly-zealous here?  Companies like Google and Stripe expect their services to come under heavy load.  Perhaps they won&amp;rsquo;t even notice the extra load from our test runs? Note: we sandbox our Google Maps interactions in the LocalSupport project.&lt;/p&gt;

&lt;p&gt;Avoiding external dependencies and network latency in our test suites sounds good, but if the majority of us have fast internet connections all the time, and those remote services are up close to 24/7 is that really such a big deal?  I guess it all depends on just how hard it is to maintain the acceptance test suites.  One big downside with sandboxing is that if the 3rd party endpoints change then we can have the situation where all our tests pass but the app is broken.  VCR and PuffingBilly at least make it simple to reset in that situation.  Both gems record network interactions to static files and then play them back to simulate the situation of being connected to the network.  Those recordings go out of date, but you can delete them and re-record, then check in the new files and you are bang up to date.  Much faster than having to re-stub individual network calls with something like webmock, but then perhaps our acceptance tests shouldn&amp;rsquo;t try to be so high fidelity, or perhaps we should rely more on unit tests?&lt;/p&gt;

&lt;p&gt;PuffingBilly is newer than VCR and it doesn&amp;rsquo;t yet have some of the features that I rely on in VCR such as grouping network recording files in directories named after the test that generated them, and config to clean sensitive data out of the recordings.  I imagine those will come - I&amp;rsquo;ve opened some tickets that I&amp;rsquo;ll check again now, but I really wonder how the majority of others are doing things?  I guess I&amp;rsquo;ll ask Stripe what their testing recommendations are, but the thing I think I&amp;rsquo;ve really learnt over the last few years is that you should be cautious taking a guideline to the limits.  Pursuing 100% test coverage, or 100% test driven, or perfect adherence to style guidelines often generates more friction than anything else.  I love the idea of fully sandboxed acceptance testing, but is it really practical as a real world system grows and has to cope with an increasing number of corner cases?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>New Projects</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/31/new-projects/"/>
    <id>http://blog.url.com/2016/08/31/new-projects/</id>
    <published>2016-08-31T01:00:00+01:00</published>
    <updated>2016-08-31T20:44:23+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Yesterday Chris Manna joined us at the AgileVentures &amp;ldquo;Kent Beck&amp;rdquo; scrum.  Chris apparently found out about us from Columbia business school.  Thanks Columbia business school!  Chris has a charity project idea to help prison inmates through an education program.  Here it is in his words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi guys, I just started a company, (soon to be charity), that focuses on inmates from incarceration all the way through to job security; from jail to job and from prisoner to programmer&lt;/p&gt;

&lt;p&gt;I think that there are a lot of smart people out there that haven&amp;rsquo;t been given a fair shake at life and there are very few ventures that help inmates all the way from point A to point B.&lt;/p&gt;

&lt;p&gt;Rates of recidivism in the US are terrible and rates of success for the recently incarcerated are so poor rehabilitation facilities rarely show their rates and charge exorbitant fees with no guarantees&lt;/p&gt;

&lt;p&gt;The biggest correlation for success for inmates is the education that an inmate receives while in prison. I&amp;rsquo;ve been working with a few inmates and found tremendous progress and I want to share my progress with others and help to educate a huge labor force&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds like a great project and just the kind of thing that AgileVentures is set up to support.  Chris taught himself coding and is also keen to level up his coding skills as well as get his project off the ground.  We&amp;rsquo;re really looking forward to working with Chris on this.  Chris originally contacted me on email, and I encouraged him to join our Slack group, and then to attend one of our online scrums (using Google Hangouts).  He joined the &amp;ldquo;Kent Beck&amp;rdquo; scrum which is at 4:45pm UTC+1 Monday to Friday.  It&amp;rsquo;s named after Kent Beck, one of the original signatories of the Agile Manifesto and leading proponent of TDD, XP and design patterns.&lt;/p&gt;

&lt;p&gt;The scrum, or standup is intended to last no more than 15 minutes, and everyone who attends is in turn given a chance to talk about what they&amp;rsquo;ve been working on, anything they are stuck on, and any plans.  The scrums are also intended as &amp;ldquo;pair&amp;rdquo; hookup events, so at the end of the session people can work out times for pair programming, which might be immediate or planned for later.  The scrums are also a forum for people like Chris to propose new projects.  We got round our usual scrum business in a few minutes and had plenty of time for Chris to talk about his project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OrV5qhIrcKQ&amp;amp;feature=youtu.be&amp;amp;t=228"&gt;https://www.youtube.com/watch?v=OrV5qhIrcKQ&amp;amp;feature=youtu.be&amp;amp;t=228&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We talked Chris through how AgileVentures works, how our free tier will provide free access to our slack instance, our regular online scrums, project logistical support, and UX review of project materials.  After a quick discussion I went ahead and created a channel on our slack for Chris&amp;rsquo; project using the placeholder name of #inside_tech. Do jump in and join that room if you want to follow the project&amp;rsquo;s progress.&lt;/p&gt;

&lt;p&gt;Chris seemed pretty excited about finding a forum where he could immediately present his project ideas and get some help and support.  It was a great experience for us too.  It&amp;rsquo;s wonderful when new projects start up.  We&amp;rsquo;ve seen the initiation of several over the last year such as #metplus, #project&lt;em&gt;unify #redeemify and #project&lt;/em&gt;scope.  All new projects need nurturing and support, and at it&amp;rsquo;s best that&amp;rsquo;s what AgileVentures can provide to charity and non-profit projects.&lt;/p&gt;

&lt;p&gt;Of course we need to make it sustainable.  We can&amp;rsquo;t pour in resources indefinitely.  At least I don&amp;rsquo;t think so any more.  When we started I was idealistic and thought that we could operate purely on a volunteer basis, and we&amp;rsquo;ve come a very long way on the back of extraordinary efforts by teams of volunteers.  The difficulty with relying purely on a volunteer framework is that volunteers come and go, and it&amp;rsquo;s difficult to predict the levels of support we can provide, and that makes things difficult for others considering whether they will put in their valuable time to contribute to one of our projects, or similarly to get a project off the ground with our help.&lt;/p&gt;

&lt;p&gt;We added premium and premium plus plans over the last six months, and the ongoing contributions from those members are now covering our basic expenses (server hosting etc.) and if we can keep growing our premium base, may eventually cover the costs of maintaining a few part-time staff members.  Premium members get a guaranteed higher level of support, making it a simpler equation for them to be involved in AgileVentures.  They know that they&amp;rsquo;ll get certain levels of support, and so that&amp;rsquo;s one less thing to worry about when making decisions about how to invest their time.  Services to projects are on an &amp;ldquo;as-available&amp;rdquo; basis, so if there are lots of volunteers excited about your project then things can move fast, but as mentioned, those volunteer numbers ebb and flow.  However if you have a deadline or need something custom quickly, if you have some funding you can pay for development services to ensure that the critical solution you need is delivered on time.  More details about that at:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nonprofits.agileventures.org"&gt;http://nonprofits.agileventures.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Premium &amp;amp; Premium Plus members and paying non-profit clients contribute to keeping AgileVentures around to provide support to new projects like Chris&amp;rsquo; InsideTech and individual developers trying to improve their agile software and team skills in real projects.  Already we have premium members from the U.S., U.K., China, India, Poland, Sweden, South Africa and Slovenia.  There are many others around the world who could benefit from the mentoring support we give to volunteer developers on premium plans.  Even if you&amp;rsquo;re not wanting to level up as a developer yourself, a donation of £10 a month will allow us to provide mentoring support to an underprivileged developer somewhere in the world. We&amp;rsquo;ll give them professional code review, professional tool support and professional development advice. £100 a month will sponsor a Premium Plus membership which will give that developer two hours of face to face support by Google Hangouts.  Read more about our sponsorship program at:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.agileventures.org/sponsorship"&gt;http://www.agileventures.org/sponsorship&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s support all the volunteers around the world, bring them together on worthy projects like Chris&amp;rsquo; InsideTech, and give them the logistical, technical and project management advice to make those projects successful.  Together we really can make the world a better place!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Speeding Up Page Loading</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/30/speeding-up-page-loading/"/>
    <id>http://blog.url.com/2016/08/30/speeding-up-page-loading/</id>
    <published>2016-08-30T01:00:00+01:00</published>
    <updated>2016-08-30T17:36:35+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Having got back from break Michael and I paired on improving the performance on the AgileVentures&amp;rsquo; user page.  Performance on the user page, also referred to as the members page, or volunteer directory, had been deteriorating for a while as it was set up to display all the users in the site in a single page.  This was fine when we had a hundred members, but as the membership number exceeded 2500, the page load was taking longer than 12 seconds to get the HTML up, and then a similar amount again to load all the user avatar images.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a rule of thumb that if your web page takes longer than seven seconds to load then whoever was trying to look at your page is now off somewhere else.  And that was the standard a while back and I think things need to be a lot faster these days.  There are &lt;a href="http://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds/"&gt;suggestions&lt;/a&gt; that you&amp;rsquo;ll lose 25% of users if a site takes longer than 4 seconds to load, and Google will crawl your site slower if it takes more than 2 seconds to load.  So clearly our user page load times were a problem.  &lt;/p&gt;

&lt;p&gt;This is perhaps another example of the &lt;a href="http://blog.agileventures.org/did-we-boil-a-frog/"&gt;boiling frog issue&lt;/a&gt;; the performance of the page slowly getting worse over time, and of course there being lots of other things to fix, features to add, business models to tweak etc.  However, having rolled out the new &amp;ldquo;Karma&amp;rdquo; feature where we rank our users in terms of their contributions to our open source charity projects, it was crystal clear we couldn&amp;rsquo;t showcase our new functionality without improving the page load times. &lt;/p&gt;

&lt;p&gt;So the best approach to take?  I was in danger of getting distracted by the range of terminology in use related to the members page.  The page title itself is &amp;ldquo;Volunteers Directory&amp;rdquo;, the URL is &lt;code&gt;http://www.agileventures.org/users&lt;/code&gt;, the navigation tab that links to it is titled &amp;ldquo;members&amp;rdquo;, and the database models all refer to users.  There&amp;rsquo;s also mention of &amp;ldquo;Filter users by&amp;rdquo; in the page itself.  Domain Driven Design (DDD) tells us that we should try and consolidate on the key terms that are meaningful to our stakeholders, and then use them consistently throughout our system. I was half tempted to try and standardise our terminology.  It&amp;rsquo;s funny though, because each of the terms &amp;ldquo;users&amp;rdquo;, &amp;ldquo;members&amp;rdquo; and &amp;ldquo;volunteers&amp;rdquo; have different overtones and are more appropriate in certain situations.  In creative writing I have a rule of thumb to avoid using the same term too frequently, or too close together.  Is there a counter-argument that there&amp;rsquo;s value from using a cluster of terms in order to provide more ways to relate to a concept, or is that just confusing?&lt;/p&gt;

&lt;p&gt;Clearly that&amp;rsquo;s a side-show compared to the more immediate problem of the page being slow to load.  Whatever the terminology, if the page takes 15 seconds to load, almost no one is going to look at it.  So then the question became, how do we speed up the page load?  Pagination seems the obvious answer.  We did spend some time profiling the page and seeing that the database query itself was pretty fast and that most of the 9 or so seconds of server activity was in the rendering of templates (i.e. string manipulation). This was helpfully reported in the Rails logs, and it seemed clear that merging the collection of users with the html templates was the main bottleneck.  Caching is a possibility here.  Rails has collection caching (a type of &lt;a href="http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching"&gt;fragment-caching&lt;/a&gt;) that might work for us here with a few changes to our templates, but we&amp;rsquo;d pretty much settled on some form of pagination as the fastest and most reliable way to improve the situation.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a big fan of infinite scroll to allow users a very simple experience of moving further on in a list of objects, and maybe we&amp;rsquo;ll want that ultimately, but this was a bleed and seemed that we needed to get the absolutely simplest fix out fast and then we could come back around to consider other options.  We already had basic vanilla pagination in the projects page.  Ironically I remember that when it was implemented (and I was playing the role of non-technical customer) I said I&amp;rsquo;d have preferred it to have been infinite scroll, since at the time I was convinced that infinite scroll was fantastically better from a UX point of view.  I think I&amp;rsquo;d still like both of them to be infinite scroll; although another data-point is that one of our power-users said he prefers pagination because he can use the page-end key on his keyboard to jump to the last result &amp;hellip;&lt;/p&gt;

&lt;p&gt;Anyway, the key thing here is get the simplest thing done and deployed in order to ensure that there aren&amp;rsquo;t areas of complexity that you&amp;rsquo;ve overlooked, that will end up delaying the release of a quick fix.  Simple pagination with the &lt;a href="https://github.com/amatsuda/kaminari"&gt;kaminari&lt;/a&gt; gem is what we went for, because that seemed more recently updated than the competing &lt;a href="https://github.com/mislav/will_paginate"&gt;will_paginate&lt;/a&gt; gem; and there were also hints we could upgrade kaminari to infinite scroll easily.  We got kaminari working to discover our projects page was already using will_paginate.  Should we consolidate?  The work was done &amp;hellip; we pushed on.  The main issue that came up was that the JavaScript quick user filter in our users page now didn&amp;rsquo;t work.  The JS filter would filter precisely what was in the page, i.e. it was relying on all the the users being displayed in a single page.  After some consideration we removed the functionality and the associated tests.  We spoke to a couple of users; we couldn&amp;rsquo;t immediately find anyone for whom this functionality was important.  In order to move forward we took it out, and got a pull-request in for adding pagination to the users page.&lt;/p&gt;

&lt;p&gt;CodeClimate pushed back on the complexity of our user controller&amp;rsquo;s index method complexity, I refactored and followed &lt;a href="https://github.com/diraulo"&gt;Raoul&amp;rsquo;s&lt;/a&gt; suggestion to remove the commented quick filter code/tests.  Raoul pushed out the code to production this weekend and now you can see our users&amp;rsquo; page with simple pagination loading in under two seconds.  Thanks Raoul!  Just what the doctor ordered.  Check it out and see what your AgileVentures&amp;rsquo; ranking is:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.agileventures.org/users"&gt;http://www.agileventures.org/users&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pair Programming Robots and having Fun</title>
    <link rel="alternate" href="http://blog.url.com/2016/08/23/pair-programming-robots-and-having-fun/"/>
    <id>http://blog.url.com/2016/08/23/pair-programming-robots-and-having-fun/</id>
    <published>2016-08-23T01:00:00+01:00</published>
    <updated>2016-08-24T12:11:42+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve had this idea for a lightweight pair programming app for a while now.  One of the main inspirations is the &lt;a href="https://itunes.apple.com/gb/app/letterpress-word-game/id526619424?mt=8"&gt;iOS letterpress app&lt;/a&gt;.  If you don&amp;rsquo;t know the game it&amp;rsquo;s a letter square, and you try to make the longest word you can from the letter square.  Pretty straightforward stuff, except that you can play and challenge people all round the world.  You take turns to make the longest word you can. What&amp;rsquo;s really cool about the app is that you can have a little game with a total stranger.  At least I assume you are actually playing with someone rather than against a robot.  I&amp;rsquo;m not sure how drop outs are managed.  When I think about it, playing against robots would be a more reliable experience, but I don&amp;rsquo;t know the stats for drop outs.  I&amp;rsquo;ve certainly dropped out of games, but perhaps I&amp;rsquo;m a sociopath and 99% of people carry on playing with each other till the end?&lt;/p&gt;

&lt;p&gt;Anyway, these days there are lots of games where you compete and even team up with strangers, e.g. Splatoon, League of Legends (LoL) and so on.  I&amp;rsquo;d love to learn more about how these games match people up to try and maximise the user experience as I think we have a related problem with matching people up for pairing sessions in our &amp;ldquo;Agile Development using Ruby on Rails&amp;rdquo; MOOC.  If Splatoon/LoL are the gaming equivalent of full screenshare pairing, then simpler games like letterpress would correspond to a sort of micro-pairing experience on a small toy problem.&lt;/p&gt;

&lt;p&gt;Ever since I&amp;rsquo;ve looked into the different styles of &lt;a href="http://www.agileventures.org/remote-pair-programming/pair-programming-protocols"&gt;ping-pong pairing&lt;/a&gt; I&amp;rsquo;ve been fascinated how protocols like &amp;ldquo;one undermanship&amp;rdquo; have a game like feel.  They remind me somehow of turn based games like chess.  So I keep thinking of a letterpress style micro-pair programming game where you are involved in light-weight ping-pong pairing sessions with people all round the world.&lt;/p&gt;

&lt;p&gt;Maybe there&amp;rsquo;s nowhere near the number of people interested in pair programming as there are in playing word games, so maybe there would never be the critical mass to make it fun, &amp;hellip; unless, robots?  I finally spent some time on a micro-pairing robot on a plane recently.  There are a couple of challenges; one is working out the rules of this ping-pong pairing game I&amp;rsquo;m imagining, and another is getting a robot to pair program sensibly with you.   &lt;/p&gt;

&lt;p&gt;An instance of a pairing game might run like this:&lt;/p&gt;

&lt;p&gt;Spec involves input/output, e.g. 2 =&amp;gt; 4, 3 =&amp;gt; 6, 4 =&amp;gt; 8  (in this case a numeric doubler).  The &amp;ldquo;one undermanship&amp;rdquo; protocol involves writing the absolute minimum amount of code (which we could perhaps measure in terms of characters? code-complexity?)&lt;/p&gt;

&lt;p&gt;Pair A writes:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'doubler'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initial failing test.  So Pair B works to write the absolute minimum code to make this test pass, e.g. &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then writes a new test that will fail&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'doubler'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So pair A writes the minimum to make this pass, in this case being intentionally obtuse (they could write &lt;code&gt;number*2&lt;/code&gt; which would be fewer characters, but perhaps we can give them points for passing only the existing tests and not others?):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then pair A adds another failing test:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'doubler'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'doubles a number'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally pair B writes the general solution:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course pair B could write:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it would be nice if we could somehow end on the more general case, with a stronger set of tests (for edge cases etc.? could build those into the initial input/outputs).  The thing about making this an enjoyable game might be a scoring system? So that you get points for one-undermanship obtuseness to an extent, but that past a certain point there&amp;rsquo;s a refactoring bonus.  Maybe the sensible approach is to only score a single round of hard coding where the complexity is actually less than the general solution?&lt;/p&gt;

&lt;p&gt;So there&amp;rsquo;s also the issue of coming up with a range of simple coding problems that make this more interesting than the most trivial cases - I guess there&amp;rsquo;s enough complexity in a few basic arithmetic problems, and we can collect more over time - there are great repositories like code wars.  Anyway, with any multi-player game we have the classic bootstrap problem that if we had a great game that lots of people were playing, then there would be lots of people to play with and it would be great; but initially there are no people playing it.  So in the meantime can we scaffold the gameplay with pretend people?  Can we write a robot pairer than can make a test pass, and generate a new chunk of code to move the ping pong on?&lt;/p&gt;

&lt;p&gt;For a restricted set of cases I think the answer is yes.  At least what I started on the plane was a chunk of code that would take and analyse a ruby exception and write the necessary code to make it pass.  It&amp;rsquo;s not very complex at the moment, it&amp;rsquo;s basically this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;NoMethodError&lt;/span&gt;
    &lt;span class="sr"&gt;/undefined method \`(.*)\' for main\:Object/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"def &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; 'robot method' ; end "&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;ArgumentError&lt;/span&gt;
    &lt;span class="sr"&gt;/wrong number of arguments \(given (.*), expected \d\)/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;
    &lt;span class="n"&gt;num_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="c1"&gt;# use class or arg to auto-infer an approprate name?&lt;/span&gt;
    &lt;span class="n"&gt;arg_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_args&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"arg&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="sr"&gt;/\(eval\)\:1\:in \`(.*)\'/&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;backtrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
    &lt;span class="n"&gt;method_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"def &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;arg_string&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;); 'robot method' ; end"&lt;/span&gt;  
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"cannot handle error class &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What it does at the moment is take NoMethodErrors and ArgumentErrors and fix things up so the specified method is created with the correct number of arguments.  Assuming that the game involves working through a set of input/output values on a range of basic arithmetic problems I can imagine it being fairly easy to extend to make the majority of failing tests pass.  Given an input/output pair, generating an RSpec test is pretty trivial.  So a little more work here and one could have a basic ping pong pairing partner.  I don&amp;rsquo;t fool myself that it wouldn&amp;rsquo;t break fairly quickly, but I think rounds of polishing could make it work reasonable well for a range of introductory problems.  Would it create a fun game that many people would want to play?  Probably not &amp;hellip; Might it be a good learning experience for some people? &amp;hellip; maybe?  I think the process of stack-trace/error analysis is quite interesting and a nice feature would be to have the robot be able to explain why it does what it does - they would be canned explanations, but they could highlight how the stacktrace/error has been analysed in order to work out what to do next.&lt;/p&gt;

&lt;p&gt;I guess the best initial interface would be to make it a command line game that you could play and the robot would edit the file that you are both working on perhaps?   Having started it I&amp;rsquo;m kind of interested in extending it; we&amp;rsquo;ll see if anyone else thinks this is anything other than mindless naval gazing :-)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Agile Approach to Login/SignUp Problems</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/21/agile-approach-to-login-signup-problems/"/>
    <id>http://blog.url.com/2016/06/21/agile-approach-to-login-signup-problems/</id>
    <published>2016-06-21T01:00:00+01:00</published>
    <updated>2016-08-24T12:09:36+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Nobody likes passwords.  Nobody enjoys signing up and logging in, but we need authentication, don&amp;rsquo;t we?  The AgileVentures site is actually very open as regards who can edit what, the site is really one giant wiki; not that many people actually notice.  No one expects to be able to edit a site that isn&amp;rsquo;t explicitly labelled as a wiki.&lt;/p&gt;

&lt;p&gt;However we do want to be able to see who does the editing, and have a list of people participating in our community.  Hence signup and login (or signin).  Originally WebSiteOne (WSO - the codename for the &lt;a href="http://www.agileventures.org/"&gt;AgileVentures&lt;/a&gt; site software) had three ways to signup:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;signup via email address&lt;/li&gt;
&lt;li&gt;signup via GitHub&lt;/li&gt;
&lt;li&gt;signup via Google+&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SignUp via a third party is a great convenience in that if avoids having to manage yet another password.  &lt;a href="http://www.agileventures.org/"&gt;AgileVentures&lt;/a&gt; is a pair programming community and so it makes sense that most users would have a GitHub account to manage their code, and a Google+ account in order to use Google Hangouts, the default video conferencing and pair programming framework.&lt;/p&gt;

&lt;p&gt;All was not rosy however.  We had to turn off the pure email sign up because the spambots caught us and starting creating hundreds of dummy accounts.&lt;/p&gt;

&lt;p&gt;The GitHub signup (always?) had the problem that if the user&amp;rsquo;s GitHub profile does not have their email set to public we get an error.  This is partly because our system is set to use email as the &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1093"&gt;unique identifier&lt;/a&gt; of the user, and also because we&amp;rsquo;d like to email users a welcome message when they sign up, support secure password reset etc.  A quick fix for this issue was a message to alert the user their GitHub email needs to be public, but complexities of the GitHub interface means that a non-trivial number of users get stuck.  &lt;/p&gt;

&lt;p&gt;The Google+ signup/in used to work fine, but some change in the system added dynamic elements to the redirect URL making it &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1063"&gt;impossible to sign up&lt;/a&gt; (or sign in?) via Google+.  We were contemplating removing Google+ entirely, but that&amp;rsquo;s complicated since users who previously signed up via G+ wouldn&amp;rsquo;t be able to sign in and can&amp;rsquo;t create GitHub accounts due to email conflicts with their old accounts - although this can be fixed with a password reset.  Working out all of the above was sucking up valuable resources, not to mention the negative reflection on the site.  We also wanted to be able to track who&amp;rsquo;s pairing with who in which hangout which requires connecting Google+ ids to AgileVentures users.&lt;/p&gt;

&lt;p&gt;Analysis of the sites&amp;rsquo; user footfall suggested that a clear majority of users were successfully signing up and logging in; making this whole issue an annoyance rather than a crisis.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.dropbox.com/s/r59glrb1wg3qroe/google_analytics_wso_signup.png?dl=1" /&gt;&lt;/p&gt;

&lt;p&gt;That appeared to reduce the priority of fixing these issues, relative to other minor bugs currently that were being reported about the site, e.g. some timezones not being correctly detected, and working on new developments such as the static site and the premium members page which might lead to sustainability of AgileVentures in the long run.&lt;/p&gt;

&lt;p&gt;You might say, well hey, let&amp;rsquo;s add a captcha to prevent the spam sign ups and re-enable the pure email signup?  Yes, but do we really want to managing that tech?  That&amp;rsquo;s adding a somewhat complex tech solution that GitHub and G+ have already handled for us.  Not to mention that we don&amp;rsquo;t yet have the resources to pay for the SSL certificates that would completely secure pure email login.  AgileVentures is a community for everyone, but unlike FreeCodeCamp we&amp;rsquo;re not focused on total beginners.  We assume you&amp;rsquo;ve got a modicum of programming experience. Although that said, we&amp;rsquo;d love to get more marketing and project management people involved - but they can login through Google+ - the absolute minimum requirement is that you can at least join a hangout.&lt;/p&gt;

&lt;p&gt;So we focused on taking some simple steps, e.g. &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1099"&gt;removing the G+ signup button&lt;/a&gt;, and adding &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1120"&gt;more instructions about how to handle GitHub settings for public emails&lt;/a&gt;.  In my book &lt;em&gt;this&lt;/em&gt; is the Agile approach at its heart - do the simplest possible thing to improve the situation and see if that helps before rushing into a more complex intervention like a &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1067"&gt;captcha&lt;/a&gt; or &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1093#issuecomment-225562997"&gt;adding a form for non-public GitHub users to add their email&lt;/a&gt;.  Not that we rule out taking those steps at some point, but it&amp;rsquo;s sensible to start with small steps to explore the issue to see if the resources to support the more complex solutions are going to be a wise investment.&lt;/p&gt;

&lt;p&gt;Having taken those first steps we got a lid on the issue, i.e. no more complaints about Google+ sign up failure since it is no longer an option; and clearer documentation to help those getting stuck on GitHub email publicity settings.  The desire to support better tracking of pair partners led us to try and get to the bottom of the Google+ redirect url problem.  Turns out that &lt;a href="https://github.com/samdunne/omniauth-gplus/issues/25"&gt;upgrading the Omniauth-oauth2&lt;/a&gt; gem introduced a change to the redirect_url that broke Google+ authentication, but not Github authentication.&lt;/p&gt;

&lt;p&gt;The Omniauth test mode acceptance tests we had in place did not catch the change to the redirect_url so we had no idea until users started encountering the problem - far from ideal.  Having manually tested that downgrading the Omniauth-oauth2 gem to version 1.3.1 did actually fix the problem, we spent a chunk of time looking for a more realistic acceptance test.  The problem is that there was no test that the redirect_url being generated was correct - something that can&amp;rsquo;t be achieved with our acceptance test supporting tool Capybara; at least not without &lt;a href="http://makandracards.com/makandra/15217-test-redirects-to-an-external-url-with-cucumber-capybara"&gt;hacking up the underlying Rails system itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The compromise seemed to be creating a request spec, a sort of unit test for the Rails authentication controller; to check that the redirect url is formatted correctly.  This test should fail if someone were to accidentally upgrade the gem again - although we&amp;rsquo;ve locked it to the working version in the Gemfile.&lt;/p&gt;

&lt;p&gt;We decided to push out the &lt;a href="https://github.com/AgileVentures/WebsiteOne/pull/1126"&gt;fix&lt;/a&gt; ASAP and create a &lt;a href="https://github.com/AgileVentures/WebsiteOne/issues/1127"&gt;chore&lt;/a&gt; for the request spec.  Partly because it would be great to have the fix out to support the legacy users who signed up with Google+ in the past, but also because experience tells us that we may have a further testing insight in a few days or weeks.&lt;/p&gt;

&lt;p&gt;In summary, it&amp;rsquo;s a complex web we weave, and to navigate it we need to take tiny steps, be careful about taking on maintenance burdens, or doing things that won&amp;rsquo;t support our long term goals.  We&amp;rsquo;ve also got to be pragmatic about what we can actually test and balance the time spent searching for testing solutions with delivering needed features to users.&lt;/p&gt;
</content>
  </entry>
</feed>
